import { z } from "zod";

const team = z.enum([
    "ARI",
    "ATL",
    "BAL",
    "BOS",
    "CHC",
    "CHW",
    "CIN",
    "CLE",
    "COL",
    "DET",
    "HOU",
    "KCR",
    "LAA",
    "LAD",
    "MIA",
    "MIL",
    "MIN",
    "NYM",
    "NYY",
    "OAK",
    "PHI",
    "PIT",
    "SDP",
    "SEA",
    "SFG",
    "STL",
    "TBR",
    "TEX",
    "TOR",
    "WSN",
    "2 Tms",
    "3 Tms",
    "4 Tms",
    "5 Tms",
    "6 Tms",
    "7 Tms",
    "8 Tms",
    "9 Tms",
    "10 Tms",
]);

const DashboardBattingResponseSchema = z.object({
    id: z.string().min(1),
    name: z.string().min(1),
    team: team,
    games: z.number().int().nonnegative(),
    plateAppearances: z.number().int().nonnegative(),
    homeRuns: z.number().int().nonnegative(),
    runs: z.number().int().nonnegative(),
    runsBattedIn: z.number().int().nonnegative(),
    stolenBases: z.number().int().nonnegative(),
    walkRate: z.number().nonnegative(),
    strikeoutRate: z.number().nonnegative(),
    isolatedPower: z.number().nonnegative(),
    battingAverageOnBallsInPlay: z.number().nonnegative(),
    battingAverage: z.number().nonnegative(),
    onBasePercentage: z.number().nonnegative(),
    sluggingPercentage: z.number().nonnegative(),
    weightedOnBaseAverage: z.number().nonnegative(),
    expectedWeightedOnBaseAverage: z.number().nonnegative().optional(),
    weightedRunsCreatedPlus: z.number().int(),
    baseRuns: z.number(),
    offense: z.number(),
    defense: z.number(),
    winsAboveReplacement: z.number(),
});
type DashboardBattingResponse = z.infer<typeof DashboardBattingResponseSchema>;

const StandardBattingResponseSchema = z.object({
    id: z.string().min(1),
    name: z.string().min(1),
    team: team,
    games: z.number().int().nonnegative(),
    atBats: z.number().int().nonnegative(),
    plateAppearances: z.number().int().nonnegative(),
    hits: z.number().int().nonnegative(),
    singles: z.number().int().nonnegative(),
    doubles: z.number().int().nonnegative(),
    triples: z.number().int().nonnegative(),
    homeRuns: z.number().int().nonnegative(),
    runs: z.number().int().nonnegative(),
    runsBattedIn: z.number().int().nonnegative(),
    walks: z.number().int().nonnegative(),
    intentionalWalks: z.number().int().nonnegative(),
    strikeouts: z.number().int().nonnegative(),
    hitByPitch: z.number().int().nonnegative(),
    sacrificeFlies: z.number().int().nonnegative(),
    sacrificeHits: z.number().int().nonnegative(),
    doublePlays: z.number().int().nonnegative(),
    stolenBases: z.number().int().nonnegative(),
    caughtStealing: z.number().int().nonnegative(),
    battingAverage: z.number().nonnegative(),
});
type StandardBattingResponse = z.infer<typeof StandardBattingResponseSchema>;

const AdvancedBattingResponseSchema = z.object({
    id: z.string().min(1),
    name: z.string().min(1),
    team: team,
    plateAppearances: z.number().int().nonnegative(),
    walkRate: z.number().nonnegative(),
    strikeoutRate: z.number().nonnegative(),
    walkToStrikeoutRatio: z.number().nonnegative(),
    battingAverage: z.number().nonnegative(),
    onBasePercentage: z.number().nonnegative(),
    sluggingPercentage: z.number().nonnegative(),
    onBasePlusSlugging: z.number().nonnegative(),
    isolatedPower: z.number().nonnegative(),
    speedScore: z.number().nonnegative(),
    battingAverageOnBallsInPlay: z.number().nonnegative(),
    ultimateBaseRunning: z.number().optional(),
    weightedGroundedIntoDoublePlays: z.number().optional(),
    weightedStolenBaseRuns: z.number(),
    weightedRunsCreated: z.number().int(),
    weightedRunsAboveAverage: z.number(),
    weightedOnBaseAverage: z.number().nonnegative(),
    weightedRunsCreatedPlus: z.number().int().optional(),
});
type AdvancedBattingResponse = z.infer<typeof AdvancedBattingResponseSchema>;

const BattedBallBattingResponseSchema = z.object({
    id: z.string().min(1),
    name: z.string().min(1),
    team: team,
    battingAverageOnBallsInPlay: z.number().nonnegative(),
    groundBallToFlyBallRatio: z.number().nonnegative(),
    lineDrivePercentage: z.number().nonnegative(),
    groundBallPercentage: z.number().nonnegative(),
    flyBallPercentage: z.number().nonnegative(),
    infieldFlyBallPercentage: z.number().nonnegative(),
    homeRunPerFlyBallRatio: z.number().nonnegative(),
    infieldHits: z.number().int().nonnegative(),
    infieldHitPercentage: z.number().nonnegative(),
    buntHits: z.number().int().nonnegative(),
    buntHitPercentage: z.number().nonnegative(),
    pullPercentage: z.number().nonnegative().optional(),
    centerFieldPercentage: z.number().nonnegative().optional(),
    oppositeFieldPercentage: z.number().nonnegative().optional(),
    softHitPercentage: z.number().nonnegative().optional(),
    mediumHitPercentage: z.number().nonnegative().optional(),
    hardHitPercentage: z.number().nonnegative().optional(),
});
type BattedBallBattingResponse = z.infer<typeof BattedBallBattingResponseSchema>;

const DashboardPitchingResponseSchema = z.object({
    id: z.string().min(1),
    name: z.string().min(1),
    team: team,
    wins: z.number().int().nonnegative(),
    losses: z.number().int().nonnegative(),
    saves: z.number().int().nonnegative(),
    games: z.number().int().nonnegative(),
    gamesStarted: z.number().int().nonnegative(),
    inningsPitched: z.number().nonnegative(),
    strikeoutsPerNineInnings: z.number().nonnegative(),
    walksPerNineInnings: z.number().nonnegative(),
    homeRunsPerNineInnings: z.number().nonnegative(),
    battingAverageOnBallsInPlay: z.number().nonnegative(),
    leftOnBasePercentage: z.number().nonnegative(),
    groundBallPercentage: z.number().nonnegative(),
    homeRunPerFlyBallRatio: z.number().nonnegative(),
    fastballVelocity: z.number().nonnegative().optional(),
    earnedRunAverage: z.number().nonnegative(),
    expectedEarnedRunAverage: z.number().nonnegative().optional(),
    fieldingIndependentPitching: z.number().nonnegative(),
    expectedFieldingIndependentPitching: z.number().nonnegative(),
    winsAboveReplacement: z.number(),
});
type DashboardPitchingResponse = z.infer<typeof DashboardPitchingResponseSchema>;

const StandardPitchingResponseSchema = z.object({
    id: z.string().min(1),
    name: z.string().min(1),
    team: team,
    wins: z.number().int().nonnegative(),
    losses: z.number().int().nonnegative(),
    era: z.number().nonnegative(),
    games: z.number().int().nonnegative(),
    gamesStarted: z.number().int().nonnegative(),
    completeGames: z.number().int().nonnegative(),
    shutouts: z.number().int().nonnegative(),
    saves: z.number().int().nonnegative(),
    holds: z.number().int().nonnegative(),
    blownSaves: z.number().int().nonnegative(),
    inningsPitched: z.number().nonnegative(),
    totalBattersFaced: z.number().int().nonnegative(),
    hits: z.number().int().nonnegative(),
    runs: z.number().int().nonnegative(),
    earnedRuns: z.number().int().nonnegative(),
    homeRuns: z.number().int().nonnegative(),
    walks: z.number().int().nonnegative(),
    intentionalWalks: z.number().int().nonnegative(),
    hitByPitch: z.number().int().nonnegative(),
    wildPitches: z.number().int().nonnegative(),
    balks: z.number().int().nonnegative(),
    strikeouts: z.number().int().nonnegative(),
});
type StandardPitchingResponse = z.infer<typeof StandardPitchingResponseSchema>;

const AdvancedPitchingResponseSchema = z.object({
    id: z.string().min(1),
    name: z.string().min(1),
    team: team,
    strikeoutsPerNineInnings: z.number().nonnegative(),
    walksPerNineInnings: z.number().nonnegative(),
    strikeoutToWalkRatio: z.number().nonnegative(),
    homeRunsPerNineInnings: z.number().nonnegative(),
    strikeoutPercentage: z.number().nonnegative(),
    walkPercentage: z.number().nonnegative(),
    strikeoutMinusWalkPercentage: z.number(),
    battingAverageAgainst: z.number().nonnegative(),
    walkHitsPerInningsPitched: z.number().nonnegative(),
    battingAverageOnBallsInPlay: z.number().nonnegative(),
    leftOnBasePercentage: z.number(),
    earnedRunAverageMinus: z.number().nonnegative(),
    fieldingIndependentPitchingMinus: z.number(),
    expectedFieldingIndependentPitchingMinus: z.number().nonnegative(),
    earnedRunAverage: z.number().nonnegative(),
    fieldingIndependentPitching: z.number(),
    earnedRunAverageMinusFieldingIndependentPitching: z.number(),
    expectedFieldingIndependentPitching: z.number().nonnegative(),
    skillInteractiveEarnedRunAverage: z.number().nonnegative(),
});
type AdvancedPitchingResponse = z.infer<typeof AdvancedPitchingResponseSchema>;

const PlayerInfoSchema = z.object({
    id: z.string().min(1),
    name: z.string().min(1),
    birthDate: z.date(),
});
type PlayerInfo = z.infer<typeof PlayerInfoSchema>;

export {
    DashboardBattingResponse,
    DashboardBattingResponseSchema,
    StandardBattingResponse,
    StandardBattingResponseSchema,
    AdvancedBattingResponse,
    AdvancedBattingResponseSchema,
    BattedBallBattingResponse,
    BattedBallBattingResponseSchema,
    DashboardPitchingResponse,
    DashboardPitchingResponseSchema,
    StandardPitchingResponse,
    StandardPitchingResponseSchema,
    AdvancedPitchingResponse,
    AdvancedPitchingResponseSchema,
    PlayerInfo,
    PlayerInfoSchema,
};
