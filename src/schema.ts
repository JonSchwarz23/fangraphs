import { type } from "os";
import { z } from "zod";

const team = z.enum([
    "ARI",
    "ATL",
    "BAL",
    "BOS",
    "CHC",
    "CHW",
    "CIN",
    "CLE",
    "COL",
    "DET",
    "HOU",
    "KCR",
    "LAA",
    "LAD",
    "MIA",
    "MIL",
    "MIN",
    "NYM",
    "NYY",
    "OAK",
    "PHI",
    "PIT",
    "SDP",
    "SEA",
    "SFG",
    "STL",
    "TBR",
    "TEX",
    "TOR",
    "WSN",
    "2 Tms",
    "3 Tms",
    "4 Tms",
    "5 Tms",
    "6 Tms",
    "7 Tms",
    "8 Tms",
    "9 Tms",
    "10 Tms",
]);

const BattingDashboardResponseSchema = z.object({
    id: z.string().min(1),
    name: z.string().min(1),
    team: team,
    games: z.number().int().nonnegative(),
    plateAppearances: z.number().int().nonnegative(),
    homeRuns: z.number().int().nonnegative(),
    runs: z.number().int().nonnegative(),
    runsBattedIn: z.number().int().nonnegative(),
    stolenBases: z.number().int().nonnegative(),
    walkRate: z.number().nonnegative(),
    strikeoutRate: z.number().nonnegative(),
    isolatedPower: z.number().nonnegative(),
    battingAverageOnBallsInPlay: z.number().nonnegative(),
    battingAverage: z.number().nonnegative(),
    onBasePercentage: z.number().nonnegative(),
    sluggingPercentage: z.number().nonnegative(),
    weightedOnBaseAverage: z.number().nonnegative(),
    expectedWeightedOnBaseAverage: z.number().nonnegative().optional(),
    weightedRunsCreatedPlus: z.number().int(),
    baseRuns: z.number(),
    offense: z.number(),
    defense: z.number(),
    winsAboveReplacement: z.number(),
});
type BattingDashboardResponse = z.infer<typeof BattingDashboardResponseSchema>;

const BattingStandardResponseSchema = z.object({
    id: z.string().min(1),
    name: z.string().min(1),
    team: team,
    games: z.number().int().nonnegative(),
    atBats: z.number().int().nonnegative(),
    plateAppearances: z.number().int().nonnegative(),
    hits: z.number().int().nonnegative(),
    singles: z.number().int().nonnegative(),
    doubles: z.number().int().nonnegative(),
    triples: z.number().int().nonnegative(),
    homeRuns: z.number().int().nonnegative(),
    runs: z.number().int().nonnegative(),
    runsBattedIn: z.number().int().nonnegative(),
    walks: z.number().int().nonnegative(),
    intentionalWalks: z.number().int().nonnegative(),
    strikeouts: z.number().int().nonnegative(),
    hitByPitch: z.number().int().nonnegative(),
    sacrificeFlies: z.number().int().nonnegative(),
    sacrificeHits: z.number().int().nonnegative(),
    doublePlays: z.number().int().nonnegative(),
    stolenBases: z.number().int().nonnegative(),
    caughtStealing: z.number().int().nonnegative(),
    battingAverage: z.number().nonnegative(),
});
type BattingStandardResponse = z.infer<typeof BattingStandardResponseSchema>;

const BattingAdvancedResponseSchema = z.object({
    id: z.string().min(1),
    name: z.string().min(1),
    team: team,
    plateAppearances: z.number().int().nonnegative(),
    walkRate: z.number().nonnegative(),
    strikeoutRate: z.number().nonnegative(),
    walkToStrikeoutRatio: z.number().nonnegative(),
    battingAverage: z.number().nonnegative(),
    onBasePercentage: z.number().nonnegative(),
    sluggingPercentage: z.number().nonnegative(),
    onBasePlusSlugging: z.number().nonnegative(),
    isolatedPower: z.number().nonnegative(),
    speedScore: z.number().nonnegative(),
    battingAverageOnBallsInPlay: z.number().nonnegative(),
    ultimateBaseRunning: z.number().optional(),
    weightedGroundedIntoDoublePlays: z.number().optional(),
    weightedStolenBaseRuns: z.number(),
    weightedRunsCreated: z.number().int(),
    weightedRunsAboveAverage: z.number(),
    weightedOnBaseAverage: z.number().nonnegative(),
    weightedRunsCreatedPlus: z.number().int().optional(),
});
type BattingAdvancedResponse = z.infer<typeof BattingAdvancedResponseSchema>;

export {
    BattingDashboardResponse,
    BattingDashboardResponseSchema,
    BattingStandardResponse,
    BattingStandardResponseSchema,
    BattingAdvancedResponse,
    BattingAdvancedResponseSchema,
};
