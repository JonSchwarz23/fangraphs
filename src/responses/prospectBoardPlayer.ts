import { z } from "zod";
import regex from "../regex";
import { get } from "http";

enum Level {
    MLB = "MLB",
    AAA = "AAA",
    AA = "AA",
    "A+" = "A+",
    A = "A",
    "A-" = "A-",
    DSL = "DSL",
    CPX = "CPX",
    None = ""
}
const LevelEnum = z.nativeEnum(Level);

enum RiskLevel {
    High = "High",
    Medium = "Med",
    Low = "Low",
    Short = "Short",
}
const RiskLevelEnum = z.nativeEnum(RiskLevel);

enum FutureValue {
    Eighty = "80",
    SeventyFive = "75",
    Seventy = "70",
    SixtyFive = "65",
    Sixty = "60",
    FiftyFive = "55",
    Fifty = "50",
    FortyFivePlus = "45+",
    FortyFive = "45",
    FortyPlus = "40+",
    Forty = "40",
    ThirtyFive = "35",
    ThirtyFivePlus = "35+",
    Thirty = "30",
    TwentyFive = "25",
    Twenty = "20",
}
const FutureValueEnum = z.nativeEnum(FutureValue);

enum HittingSide {
    Right = "R",
    Left = "L",
    Switch = "S",
}
const HittingSideEnum = z.nativeEnum(HittingSide);

enum ThrowingArm {
    Right = "R",
    Left = "L",
}
const ThrowingArmEnum = z.nativeEnum(ThrowingArm);

const getBirthDate = (days: string) => {
    const date = new Date(1899, 11, 30)
    date.setDate(30 + Number(days));
    return date;
}

const getTommyJohnDate = (date: string | null) => {
    if(!date) return null;
    if(date[0] === "*") return new Date(date.slice(1));
    if(date[date.length - 1] === "*") return new Date(date.slice(0, date.length - 1));
    return new Date(date);
};

const ProspectBoardPlayerSchema = z.object({
    llevel: LevelEnum.nullish(),
    mlevel: LevelEnum.nullish(),
    minorMasterId: z.string().min(1),
    playerName: z.string().min(1),
    playerNameRoute: z.string(),
    RPM: z.string().nullish(),
    Vel: z.string().nullish(),
    cBonus: z.null(),
    cRisk: RiskLevelEnum.nullish(),
    cETA: z.string(),
    cFV: FutureValueEnum,
    cWeight: z.string(),
    cHeight: z.string(),
    cRank: z.null(),
    cOVR: z.string().nullish(),
    cORG: z.string(),
    cDraftSchool: z.string(),
    Hit: z.string(),
    Game: z.string(),
    Raw: z.string(),
    Spd: z.string(),
    Fld: z.string(),
    Arm: z.string().nullish(),
    FB: z.string(),
    SL: z.string(),
    CB: z.string(),
    CH: z.string(),
    SPL: z.string(),
    CT: z.string(),
    CMD: z.string(),
    cSeason: z.string(),
    playerPageSortOrder: z.number(),
    cCollegeCommit: z.string().nullish(),
    ID: z.number(),
    RowID: z.null(),
    FirstName: z.string(),
    LastName: z.string(),
    Position: z.string(),
    Age: z.string(),
    Team: z.string(),
    Season: z.number(),
    Type: z.string(),
    PlayerId: z.string(),
    DraftRank: z.null(),
    ProjTeam: z.null(),
    Ovr_Rank: z.number().nullish(),
    Org_Rank: z.number(),
    FV_Current: z.number(),
    Risk_Current: z.null(),
    ETA_Current: z.number(),
    Draft: z.null(),
    CollegeCommit: z.null(),
    Height: z.number(),
    Weight: z.number(),
    Bats: HittingSideEnum,
    Throws: ThrowingArmEnum,
    School: z.string(),
    Summary: z.string(),
    YouTube: z.string().nullish(),
    pHit: z.number().nullish(),
    fHit: z.number().nullish(),
    pGame: z.number().nullish(),
    fGame: z.number().nullish(),
    pRaw: z.number().nullish(),
    fRaw: z.number().nullish(),
    pSpd: z.number().nullish(),
    fSpd: z.number().nullish(),
    pFld: z.number().nullish(),
    fFld: z.number().nullish(),
    pArm: z.number().nullish(),
    fArm: z.number().nullish(),
    pFB: z.number().nullish(),
    fFB: z.number().nullish(),
    pSL: z.number().nullish(),
    fSL: z.number().nullish(),
    pCB: z.number().nullish(),
    fCB: z.number().nullish(),
    pCH: z.number().nullish(),
    fCH: z.number().nullish(),
    pSPL: z.number().nullish(),
    fSPL: z.number().nullish(),
    pCT: z.number().nullish(),
    fCT: z.number().nullish(),
    pCMD: z.number().nullish(),
    fCMD: z.number().nullish(),
    bRPM: z.number().nullish(),
    fRPM: z.number().nullish(),
    Range: z.string().regex(regex.range).nullish(),
    Touch: z.number().nullish(),
    Variance: RiskLevelEnum.nullish(),
    State: z.null(),
    BirthDate: z.string().regex(regex.number),
    TLDR: z.string().nullish(),
    Athleticism: z.number().nullish(),
    Frame: z.number().nullish(),
    Performer: z.number().nullish(),
    Delivery: z.number().nullish(),
    Agent: z.string().nullish(),
    ProjBonus: z.null(),
    Prev_Ovr_Rank: z.null(),
    Prev_Org_Rank: z.null(),
    Trend: z.string().nullish(),
    TJDate: z.string().nullish(),
    Ovr_Summary: z.string().nullish(),
    Dist_Raw: z.string().nullish(),
    Dist_JSON: z.null(),
    DraftSign: z.null(),
    Player_Type: z.string().nullish(),
    PV: z.null(),
    Upside: z.null(),
    Pos_Rk: z.number().nullish(),
    Birth_Yr_Rk: z.null(),
    Class_Rk: z.number().nullish(),
    Amateur_Rk: z.number().nullish(),
    Signed_Yr: z.number().nullish(),
    Signed_Mkt: z.string().nullish(),
    Signed_Org: z.string().nullish(),
    Draft_Rnd: z.number().nullish(),
    Sign_Bonus: z.number().nullish(),
    Bonus_Class_Rk: z.number().nullish(),
    School_Type: z.string().nullish(),
    HS_State: z.string().nullish(),
    College_Commit: z.string().nullish(),
    Country: z.string().nullish(),
    Pitch_Sel: z.number().nullish(),
    Bat_Ctrl: z.number().nullish(),
    Avg_EV: z.number().nullish(),
    Max_EV: z.number().nullish(),
    Fantasy_Redraft: z.number().nullish(),
    Fantasy_Dynasty: z.number().nullish(),
    FYPD_Eligible: z.string().regex(new RegExp("Y")).nullish(),
    "HardHit%": z.number().nullish(),
    Levers: z.string().nullish(),
    FBType: z.string().nullish(),
    TypeDerived: z.string().nullish(),
    IsVisible: z.string().nullish(),
    options: z.string().nullish(),
    servicetime: z.string().nullish(),
})
.strict()
.transform((obj) => {
    return {
        currentLevel: obj.llevel,
        minorLeagueId: obj.minorMasterId,
        playerName: obj.playerName,
        riskLevel: obj.cRisk,
        futureValue: obj.cFV,
        draftSchool: obj.cDraftSchool,
        id: obj.ID,
        firstName: obj.FirstName,
        lastName: obj.LastName,
        position: obj.Position,
        team: obj.Team,
        overallRank: obj.Ovr_Rank,
        organizationRank: obj.Org_Rank,
        eta: obj.ETA_Current,
        height: obj.Height,
        weight: obj.Weight,
        hittingSide: obj.Bats,
        throwingArm: obj.Throws,
        school: obj.School,
        summary: obj.Summary,
        presentHit: obj.pHit,
        futureHit: obj.fHit,
        presentGamePower: obj.pGame,
        futureGamePower: obj.fGame,
        presentRawPower: obj.pRaw,
        futureRawPower: obj.fRaw,
        presentSpeed: obj.pSpd,
        futureSpeed: obj.fSpd,
        presentFielding: obj.pFld,
        futureFielding: obj.fFld,
        presentArm: obj.pArm,
        futureArm: obj.fArm,
        presentFastball: obj.pFB,
        futureFastball: obj.fFB,
        presentSlider: obj.pSL,
        futureSlider: obj.fSL,
        presentCurveball: obj.pCB,
        futureCurveball: obj.fCB,
        presentChangeup: obj.pCH,
        futureChangeup: obj.fCH,
        presentSplitter: obj.pSPL,
        futureSplitter: obj.fSPL,
        presentCutter: obj.pCT,
        futureCutter: obj.fCT,
        presentCommand: obj.pCMD,
        futureCommand: obj.fCMD,
        breakingBallSpinRate: obj.bRPM,
        fastballSpinRate: obj.fRPM,
        lowerRange: obj.Range ? Number(obj.Range.split("-")[0]) : null,
        upperRange: obj.Range ? Number(obj.Range.split("-")[1]) : null,
        touch: obj.Touch,
        birthDate: getBirthDate(obj.BirthDate),
        athleticism: obj.Athleticism ?? 0,
        frame: obj.Frame ?? 0,
        performer: obj.Performer ?? 0,
        delivery: obj.Delivery ?? 0,
        agent: obj.Agent,
        tommyJohnDate: obj.TJDate,
        draftRound: obj.Draft_Rnd,
        country: obj.Country,
        pitchSelection: obj.Pitch_Sel,
        batControl: obj.Bat_Ctrl,
        averageExitVelocity: obj.Avg_EV,
        maxExitVelocity: obj.Max_EV,
        firstYearPlayerDraftEligible: obj.FYPD_Eligible === "Y",
        hardHitPercentage: obj["HardHit%"],
        fastballType: obj.FBType,
    }
});
type ProspectBoardPlayer = z.infer<typeof ProspectBoardPlayerSchema>;

export { ProspectBoardPlayerSchema, ProspectBoardPlayer}