import { z } from "zod";

enum PitchingHand {
    Right = "R",
    Left = "L",
}
const PitchingHandEnum = z.nativeEnum(PitchingHand);

const MajorLeaguePitcherSchema = z
    .object({
        Throws: PitchingHandEnum,
        xMLBAMID: z.number().int(),
        Name: z.string().min(1),
        Age: z.number().int(),
        W: z.number().int(),
        L: z.number().int(),
        ERA: z.number(),
        G: z.number().int(),
        GS: z.number().int(),
        CG: z.number().int(),
        ShO: z.number().int(),
        SV: z.number().int(),
        BS: z.number().int(),
        IP: z.number(),
        TBF: z.number().int(),
        H: z.number().int(),
        R: z.number().int(),
        ER: z.number().int(),
        HR: z.number().int(),
        BB: z.number().int(),
        IBB: z.number().int(),
        HBP: z.number().int(),
        WP: z.number().int(),
        BK: z.number().int(),
        SO: z.number().int(),
        GB: z.number().int(),
        FB: z.number().int(),
        LD: z.number().int(),
        IFFB: z.number().int(),
        Pitches: z.number().int(),
        Balls: z.number().int(),
        Strikes: z.number().int(),
        RS: z.number().int(),
        IFH: z.number().int(),
        BU: z.number().int(),
        BUH: z.number().int(),
        "K/9": z.number(),
        "BB/9": z.number(),
        "K/BB": z.number(),
        "H/9": z.number(),
        "HR/9": z.number(),
        AVG: z.number(),
        WHIP: z.number(),
        BABIP: z.number(),
        "LOB%": z.number(),
        FIP: z.number(),
        "GB/FB": z.number(),
        "LD%": z.number(),
        "GB%": z.number(),
        "FB%": z.number(),
        "IFFB%": z.number(),
        "HR/FB": z.number(),
        "IFH%": z.number(),
        "BUH%": z.number(),
        "TTO%": z.number(),
        CFraming: z.number().nullish(),
        Starting: z.number().nullish(),
        "Start-IP": z.number().nullish(),
        Relieving: z.number().nullish(),
        "Relief-IP": z.number().nullish(),
        RAR: z.number(),
        WAR: z.number(),
        Dollars: z.number(),
        "RA9-Wins": z.number(),
        "LOB-Wins": z.number(),
        "BIP-Wins": z.number(),
        "BS-Wins": z.number(),
        tERA: z.number(),
        xFIP: z.number(),
        WPA: z.number(),
        "-WPA": z.number(),
        "+WPA": z.number(),
        RE24: z.number(),
        REW: z.number(),
        pLI: z.number(),
        inLI: z.number(),
        gmLI: z.number(),
        exLI: z.number().nullish(),
        Pulls: z.number().int(),
        "WPA/LI": z.number(),
        Clutch: z.number().nullish(),
        "FB%1": z.number().nullish(),
        FBv: z.number().nullish(),
        "SL%": z.number().nullish(),
        SLv: z.number().nullish(),
        "CT%": z.number().nullish(),
        CTv: z.number().nullish(),
        "CB%": z.number().nullish(),
        CBv: z.number().nullish(),
        "CH%": z.number().nullish(),
        CHv: z.number().nullish(),
        "SF%": z.number().nullish(),
        SFv: z.number().nullish(),
        "KN%": z.number().nullish(),
        KNv: z.number().nullish(),
        "XX%": z.number().nullish(),
        "PO%": z.number().nullish(),
        wFB: z.number().nullish(),
        wSL: z.number().nullish(),
        wCT: z.number().nullish(),
        wCB: z.number().nullish(),
        wCH: z.number().nullish(),
        wSF: z.number().nullish(),
        wKN: z.number().nullish(),
        "wFB/C": z.number().nullish(),
        "wSL/C": z.number().nullish(),
        "wCT/C": z.number().nullish(),
        "wCB/C": z.number().nullish(),
        "wCH/C": z.number().nullish(),
        "wSF/C": z.number().nullish(),
        "wKN/C": z.number().nullish(),
        "O-Swing%": z.number().nullish(),
        "Z-Swing%": z.number(),
        "Swing%": z.number(),
        "O-Contact%": z.number().nullish(),
        "Z-Contact%": z.number().nullish(),
        "Contact%": z.number(),
        "Zone%": z.number(),
        "F-Strike%": z.number().nullish(),
        "SwStr%": z.number(),
        "CStr%": z.number(),
        "C+SwStr%": z.number(),
        HLD: z.number().int(),
        SD: z.number().int(),
        MD: z.number().int(),
        "ERA-": z.number(),
        "FIP-": z.number(),
        "xFIP-": z.number(),
        "K%": z.number(),
        "BB%": z.number(),
        "K-BB%": z.number(),
        SIERA: z.number(),
        kwERA: z.number(),
        "RS/9": z.number(),
        "E-F": z.number(),
        Pull: z.number().int(),
        Cent: z.number().int(),
        Oppo: z.number().int(),
        Soft: z.number().int(),
        Med: z.number().int(),
        Hard: z.number().int(),
        bipCount: z.number().int(),
        "Pull%": z.number(),
        "Cent%": z.number(),
        "Oppo%": z.number(),
        "Soft%": z.number(),
        "Med%": z.number(),
        "Hard%": z.number(),
        "K/9+": z.number(),
        "BB/9+": z.number(),
        "K/BB+": z.number().nullish(),
        "HR/9+": z.number(),
        "AVG+": z.number(),
        "WHIP+": z.number(),
        "BABIP+": z.number(),
        "LOB%+": z.number().nullish(),
        "K%+": z.number(),
        "BB%+": z.number(),
        "LD%+": z.number(),
        "GB%+": z.number(),
        "FB%+": z.number(),
        "HRFB%+": z.number().nullish(),
        "Pull%+": z.number(),
        "Cent%+": z.number(),
        "Oppo%+": z.number(),
        "Soft%+": z.number(),
        "Med%+": z.number(),
        "Hard%+": z.number(),
        xERA: z.number(),
        pb_o_CH: z.number().nullish(),
        pb_s_CH: z.number().nullish(),
        pb_c_CH: z.number().nullish(),
        pb_o_CU: z.number().nullish(),
        pb_s_CU: z.number().nullish(),
        pb_c_CU: z.number().nullish(),
        pb_o_FF: z.number().nullish(),
        pb_s_FF: z.number().nullish(),
        pb_c_FF: z.number().nullish(),
        pb_o_SI: z.number().nullish(),
        pb_s_SI: z.number().nullish(),
        pb_c_SI: z.number().nullish(),
        pb_o_SL: z.number().nullish(),
        pb_s_SL: z.number().nullish(),
        pb_c_SL: z.number().nullish(),
        pb_o_KC: z.number().nullish(),
        pb_s_KC: z.number().nullish(),
        pb_c_KC: z.number().nullish(),
        pb_o_FC: z.number().nullish(),
        pb_s_FC: z.number().nullish(),
        pb_c_FC: z.number().nullish(),
        pb_o_FS: z.number().nullish(),
        pb_s_FS: z.number().nullish(),
        pb_c_FS: z.number().nullish(),
        pb_overall: z.number().nullish(),
        pb_stuff: z.number().nullish(),
        pb_command: z.number().nullish(),
        pb_xRV100: z.number().nullish(),
        pb_ERA: z.number().nullish(),
        sp_s_CH: z.number().nullish(),
        sp_l_CH: z.number().nullish(),
        sp_p_CH: z.number().nullish(),
        sp_s_CU: z.number().nullish(),
        sp_l_CU: z.number().nullish(),
        sp_p_CU: z.number().nullish(),
        sp_s_FF: z.number().nullish(),
        sp_l_FF: z.number().nullish(),
        sp_p_FF: z.number().nullish(),
        sp_s_SI: z.number().nullish(),
        sp_l_SI: z.number().nullish(),
        sp_p_SI: z.number().nullish(),
        sp_s_SL: z.number().nullish(),
        sp_l_SL: z.number().nullish(),
        sp_p_SL: z.number().nullish(),
        sp_s_KC: z.number().nullish(),
        sp_l_KC: z.number().nullish(),
        sp_p_KC: z.number().nullish(),
        sp_s_FC: z.number().nullish(),
        sp_l_FC: z.number().nullish(),
        sp_p_FC: z.number().nullish(),
        sp_s_FS: z.number().nullish(),
        sp_l_FS: z.number().nullish(),
        sp_p_FS: z.number().nullish(),
        sp_s_FO: z.number().nullish(),
        sp_l_FO: z.number().nullish(),
        sp_p_FO: z.number().nullish(),
        sp_stuff: z.number().nullish(),
        sp_location: z.number().nullish(),
        sp_pitching: z.number().nullish(),
        EV: z.number(),
        LA: z.number(),
        Barrels: z.number().int(),
        "Barrel%": z.number(),
        maxEV: z.number(),
        HardHit: z.number().int(),
        "HardHit%": z.number(),
        Q: z.number(),
        TIP: z.number(),
        PlayerNameRoute: z.string().min(1),
        PlayerName: z.string().min(1),
        playerid: z.number().int(),
        TeamName: z.string().min(1),
        TeamNameAbb: z.string().min(1),
        teamid: z.number().int(),
    })
    .transform((obj) => {
        return {
            pitchingHand: obj.Throws,
            mlbId: obj.xMLBAMID,
            position: obj.Name.split("position=")[1].split('"')[0],
            age: obj.Age,
            wins: obj.W,
            losses: obj.L,
            earnedRunAverage: obj.ERA,
            games: obj.G,
            gamesStarted: obj.GS,
            completeGames: obj.CG,
            shutouts: obj.ShO,
            saves: obj.SV,
            blownSaves: obj.BS,
            inningsPitched: obj.IP,
            totalBattersFaced: obj.TBF,
            hits: obj.H,
            runs: obj.R,
            earnedRuns: obj.ER,
            homeRuns: obj.HR,
            walks: obj.BB,
            intentionalWalks: obj.IBB,
            hitByPitch: obj.HBP,
            wildPitches: obj.WP,
            balks: obj.BK,
            strikeouts: obj.SO,
            groundBalls: obj.GB,
            flyBalls: obj.FB,
            lineDrives: obj.LD,
            infieldFlyBalls: obj.IFFB,
            totalPitches: obj.Pitches,
            balls: obj.Balls,
            strikes: obj.Strikes,
            runSupport: obj.RS,
            infieldHits: obj.IFH,
            bunts: obj.BU,
            buntHits: obj.BUH,
            strikeoutsPerNineInnings: obj["K/9"],
            walksPerNineInnings: obj["BB/9"],
            strikeoutToWalkRatio: obj["K/BB"],
            hitsPerNineInnings: obj["H/9"],
            homeRunsPerNineInnings: obj["HR/9"],
            battingAverageAgainst: obj.AVG,
            walksAndHitsPerInningPitched: obj.WHIP,
            battingAverageOnBallsInPlay: obj.BABIP,
            leftOnBasePercentage: obj["LOB%"],
            fieldingIndependentPitching: obj.FIP,
            groundBallToFlyBallRatio: obj["GB/FB"],
            lineDrivePercentage: obj["LD%"],
            groundBallPercentage: obj["GB%"],
            flyBallPercentage: obj["FB%"],
            infieldFlyBallPercentage: obj["IFFB%"],
            homeRunPerFlyBallRatio: obj["HR/FB"],
            infieldHitPercentage: obj["IFH%"],
            buntHitPercentage: obj["BUH%"],
            threeTrueOutcomesPercentage: obj["TTO%"],
            framingValue: obj.CFraming,
            startingRunsAboveReplacement: obj.Starting,
            startingInningsPitched: obj["Start-IP"],
            relievingRunsAboveReplacement: obj.Relieving,
            relievingInningsPitched: obj["Relief-IP"],
            runsAboveReplacement: obj.RAR,
            winsAboveReplacement: obj.WAR,
            warDollars: obj.Dollars,
            runsAllowedWinsAboveReplacement: obj["RA9-Wins"],
            leftOnBaseWinsAboveAverage: obj["LOB-Wins"],
            ballsInPlayWinsAboveAverage: obj["BIP-Wins"],
            blownSavesWinsAboveAverage: obj["BS-Wins"],
            trueEarnedRunAverage: obj.tERA,
            expectedFieldingIndependentPitching: obj.xFIP,
            winProbabilityAdded: obj.WPA,
            lossAdvancement: obj["-WPA"],
            winAdvancement: obj["+WPA"],
            runsAboveAverage24: obj.RE24,
            winsAboveAverage24: obj.REW,
            averageLeverageIndex: obj.pLI,
            averageLeverageIndexAtStartOfInning: obj.inLI,
            averageLeverageIndexWhenEnteringTheGame: obj.gmLI,
            averageLeverageIndexWhenExitingTheGame: obj.exLI,
            timesPulled: obj.Pulls,
            situationalWins: obj["WPA/LI"],
            clutch: obj.Clutch,
            fastballPercentage: obj["FB%1"],
            fastballVelocity: obj.FBv,
            sliderPercentage: obj["SL%"],
            sliderVelocity: obj.SLv,
            cutterPercentage: obj["CT%"],
            cutterVelocity: obj.CTv,
            curveballPercentage: obj["CB%"],
            curveballVelocity: obj.CBv,
            changeupPercentage: obj["CH%"],
            changeupVelocity: obj.CHv,
            splitFingerPercentage: obj["SF%"],
            splitFingerVelocity: obj.SFv,
            knuckleballPercentage: obj["KN%"],
            knuckleballVelocity: obj.KNv,
            unknownPitchPercentage: obj["XX%"],
            pitchoutPercentage: obj["PO%"],
            fastballRunsAboveAverage: obj.wFB,
            sliderRunsAboveAverage: obj.wSL,
            cutterRunsAboveAverage: obj.wCT,
            curveballRunsAboveAverage: obj.wCB,
            changeupRunsAboveAverage: obj.wCH,
            splitFingerRunsAboveAverage: obj.wSF,
            knuckleballRunsAboveAverage: obj.wKN,
            fastballRunsAboveAveragePer100Pitches: obj["wFB/C"],
            sliderRunsAboveAveragePer100Pitches: obj["wSL/C"],
            cutterRunsAboveAveragePer100Pitches: obj["wCT/C"],
            curveballRunsAboveAveragePer100Pitches: obj["wCB/C"],
            changeupRunsAboveAveragePer100Pitches: obj["wCH/C"],
            splitFingerRunsAboveAveragePer100Pitches: obj["wSF/C"],
            knuckleballRunsAboveAveragePer100Pitches: obj["wKN/C"],
            outsideZoneSwingPercentage: obj["O-Swing%"],
            zoneSwingPercentage: obj["Z-Swing%"],
            swingPercentage: obj["Swing%"],
            outsideZoneContactPercentage: obj["O-Contact%"],
            zoneContactPercentage: obj["Z-Contact%"],
            contactPercentage: obj["Contact%"],
            zonePercentage: obj["Zone%"],
            firstPitchStrikePercentage: obj["F-Strike%"],
            swingingStrikePercentage: obj["SwStr%"],
            calledStrikePercentage: obj["CStr%"],
            calledPlusSwingingStrikePercentage: obj["C+SwStr%"],
            holds: obj.HLD,
            shutdowns: obj.SD,
            meltdowns: obj.MD,
            earnedRunAverageMinus: obj["ERA-"],
            fieldingIndependentPitchingMinus: obj["FIP-"],
            expectedFieldingIndependentPitchingMinus: obj["xFIP-"],
            strikeoutPercentage: obj["K%"],
            walkPercentage: obj["BB%"],
            strikeoutMinusWalkPercentage: obj["K-BB%"],
            skillInteractiveEarnedRunAverage: obj.SIERA,
            kwEarnedRunAverage: obj.kwERA,
            runsSupportPerNineInnings: obj["RS/9"],
            earnedRunAverageMinusFieldingIndependentPitching: obj["E-F"],
            pullHits: obj.Pull,
            centerFieldHits: obj.Cent,
            oppositeFieldHits: obj.Oppo,
            softContactHits: obj.Soft,
            mediumContactHits: obj.Med,
            hardContactHits: obj.Hard,
            ballsInPlay: obj.bipCount,
            pullPercentage: obj["Pull%"],
            centerFieldPercentage: obj["Cent%"],
            oppositeFieldPercentage: obj["Oppo%"],
            softContactPercentage: obj["Soft%"],
            mediumContactPercentage: obj["Med%"],
            hardContactPercentage: obj["Hard%"],
            strikeoutsPerNineInningsPlus: obj["K/9+"],
            walksPerNineInningsPlus: obj["BB/9+"],
            strikeoutToWalkRatioPlus: obj["K/BB+"],
            homeRunsPerNineInningsPlus: obj["HR/9+"],
            battingAveragePlus: obj["AVG+"],
            walksAndHitsPerInningPitchedPlus: obj["WHIP+"],
            battingAverageOnBallsInPlayPlus: obj["BABIP+"],
            leftOnBasePercentagePlus: obj["LOB%+"],
            strikeoutPercentagePlus: obj["K%+"],
            walkPercentagePlus: obj["BB%+"],
            lineDrivePercentagePlus: obj["LD%+"],
            groundBallPercentagePlus: obj["GB%+"],
            flyBallPercentagePlus: obj["FB%+"],
            homeRunPerFlyBallRatioPlus: obj["HRFB%+"],
            pullPercentagePlus: obj["Pull%+"],
            centerFieldPercentagePlus: obj["Cent%+"],
            oppositeFieldPercentagePlus: obj["Oppo%+"],
            softContactPercentagePlus: obj["Soft%+"],
            mediumContactPercentagePlus: obj["Med%+"],
            hardContactPercentagePlus: obj["Hard%+"],
            expectedEarnedRunAverage: obj.xERA,
            pitchingBotChangeupOverall: obj.pb_o_CH,
            pitchingBotChangeupStuff: obj.pb_s_CH,
            pitchingBotChangeupCommand: obj.pb_c_CH,
            pitchingBotCurveballOverall: obj.pb_o_CU,
            pitchingBotCurveballStuff: obj.pb_s_CU,
            pitchingBotCurveballCommand: obj.pb_c_CU,
            pitchingBotFastballOverall: obj.pb_o_FF,
            pitchingBotFastballStuff: obj.pb_s_FF,
            pitchingBotFastballCommand: obj.pb_c_FF,
            pitchingBotSinkerOverall: obj.pb_o_SI,
            pitchingBotSinkerStuff: obj.pb_s_SI,
            pitchingBotSinkerCommand: obj.pb_c_SI,
            pitchingBotSliderOverall: obj.pb_o_SL,
            pitchingBotSliderStuff: obj.pb_s_SL,
            pitchingBotSliderCommand: obj.pb_c_SL,
            pitchingBotKnuckleCurveOverall: obj.pb_o_KC,
            pitchingBotKnuckleCurveStuff: obj.pb_s_KC,
            pitchingBotKnuckleCurveCommand: obj.pb_c_KC,
            pitchingBotCutterOverall: obj.pb_o_FC,
            pitchingBotCutterStuff: obj.pb_s_FC,
            pitchingBotCutterCommand: obj.pb_c_FC,
            pitchingBotSplitterOverall: obj.pb_o_FS,
            pitchingBotSplitterStuff: obj.pb_s_FS,
            pitchingBotSplitterCommand: obj.pb_c_FS,
            pitchingBotOverall: obj.pb_overall,
            pitchingBotStuff: obj.pb_stuff,
            pitchingBotCommand: obj.pb_command,
            pitchingBotExpectedRunValuePer100Pitches: obj.pb_xRV100,
            pitchingBotEarnedRunAverage: obj.pb_ERA,
            stuffPlusChangeup: obj.sp_s_CH,
            locationPlusChangeup: obj.sp_l_CH,
            pitchingPlusChangeup: obj.sp_p_CH,
            stuffPlusCurveball: obj.sp_s_CU,
            locationPlusCurveball: obj.sp_l_CU,
            pitchingPlusCurveball: obj.sp_p_CU,
            stuffPlusFastball: obj.sp_s_FF,
            locationPlusFastball: obj.sp_l_FF,
            pitchingPlusFastball: obj.sp_p_FF,
            stuffPlusSinker: obj.sp_s_SI,
            locationPlusSinker: obj.sp_l_SI,
            pitchingPlusSinker: obj.sp_p_SI,
            stuffPlusSlider: obj.sp_s_SL,
            locationPlusSlider: obj.sp_l_SL,
            pitchingPlusSlider: obj.sp_p_SL,
            stuffPlusKnuckleCurve: obj.sp_s_KC,
            locationPlusKnuckleCurve: obj.sp_l_KC,
            pitchingPlusKnuckleCurve: obj.sp_p_KC,
            stuffPlusCutter: obj.sp_s_FC,
            locationPlusCutter: obj.sp_l_FC,
            pitchingPlusCutter: obj.sp_p_FC,
            stuffPlusSplitter: obj.sp_s_FS,
            locationPlusSplitter: obj.sp_l_FS,
            pitchingPlusSplitter: obj.sp_p_FS,
            stuffPlusForkball: obj.sp_s_FO,
            locationPlusForkball: obj.sp_l_FO,
            pitchingPlusForkball: obj.sp_p_FO,
            stuffPlusOverall: obj.sp_stuff,
            locationPlusOverall: obj.sp_location,
            pitchingPlusOverall: obj.sp_pitching,
            averageExitVelocity: obj.EV,
            averageLaunchAngle: obj.LA,
            barrels: obj.Barrels,
            barrelPercentage: obj["Barrel%"],
            maxExitVelocity: obj.maxEV,
            hardHits: obj.HardHit,
            hardHitPercentage: obj["HardHit%"],
            inningsPitchedForQualifying: obj.Q,
            totalInningsPitched: obj.TIP,
            playerNameRoute: obj.PlayerNameRoute,
            playerName: obj.PlayerName,
            playerId: obj.playerid,
            teamName: obj.TeamName,
            teamNameAbbreviation: obj.TeamNameAbb,
            teamId: obj.teamid,
        };
    });
type MajorLeaguePitcher = z.infer<typeof MajorLeaguePitcherSchema>;

export { MajorLeaguePitcherSchema, MajorLeaguePitcher };
